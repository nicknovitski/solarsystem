%section#conflict-resolution.chapter
  %header
    %h1 Conflict Resolution
  %p
    When two characters in the fiction have a
    = succeed "," do
      %code conflict of interest
    there is a whole array of rules available for seeing how that plays out. Conflicts are one of the high points of drama in the game, as characters with convictions clash in different ways to find out whose will and strength triumphs. Thus conflicts provide for sudden reversals in the progress of events and the all-important closure as well.
  %p
    The Solar System uses
    %code Ability checks
    to find out which character wins a given conflict. The notion is that the character with stronger Ability is going to triumph, unless the weaker has luck or greater will to victory on his side. Ability checks are used for some other things as well, so they were explained in depth in the previous chapter.
  %section#initiating-conflict
    %header
      %h2 Initiating conflict
    %p Conflicts happen when a player declares such as he notices that a disagreement between characters in the fiction might be characterized in terms of conflict. This requires for the characters to have intents that are clearly in cross-purposes in the immediate scene. They need to want for contradictory things, in other words.
    %p The exact events in the fiction that are represented as conflict might involve violence, arguments, challenges and competition; the essence of conflict is two characters in opposition.
    %p
      When a conflict is declared, the players of the participating characters well might wish to describe the
      %code goals
      of their characters so nobody misunderstands why the characters are in conflict. The purpose of the conflict resolution procedure is to find out which character gets their way in the situation.
    %p
      The conflict itself is resolved with
      = succeed ":" do
        %code opposed Ability checks
      the players each make an Ability check normally and compare their results, with the better result triumphing. But first, the conflict needs to have its stakes clarified.
  %section#conflict-stakes
    %header
      %h2 Conflict stakes
    %p
      The Story Guide has the specific responsibility of declaring the
      %code stakes
      of the conflict after hearing the goals of the characters. This is a slightly intricate issue, so pay attention.
    %p
      Normally, when a conflict is initiated, it is pretty obvious what the conflict is
      = succeed ":" do
        %em for
      a character wishes to bed another, say, and the conflict is over whether he manages to convince the other character to play along. The goals of the characters are rather unambiguous in this sense: whatever the characters want to do, that’s usually what the conflict is about. In these cases the Story Guide just nods and gives the go-ahead for players to proceed with resolving the conflict.
    %p
      The most typical situation where the Story Guide needs to clarify the stakes is when a player’s declared goal is
      = succeed "." do
        %code too shallow
      For example, a player might describe that his character is going to shoot another character. All well and good, but that is not actually a
      = succeed "," do
        %em goal
      it’s just what the character is
      %em doing
      to achieve his goal. Is the character trying to stop the other from hurting him? Is he trying to subdue the other by wounding him? Is he trying to kill the other character? For conflict resolution the Story Guide needs to find out and bring these intentions on the table, as the players will need to know what they are resolving when narrating the conflict sequence.
    %p
      Another situation where the Story Guide needs to modify the stakes from the intents described by the players is when a character wants
      = succeed "." do
        %code too much
      For example, a character might want to rob the emir of a valuable jewel kept on the bosom of the emir’s daughter. Can the player just declare a conflict over this and resolve the exciting situation in one roll? This is a matter of
      = succeed "," do
        %code leverage
      %code propriety
      and
      = succeed "." do
        %code scope
  %section#leverage-propriety-and-scope
    %header
      %h2 Leverage, propriety and scope
    %p
      When a character can try to succeed in something, he has
      = succeed "." do
        %code leverage
      A character who has wings might try to fly because of those wings, for example. A character who has sneaked into the bedchambers of the emir’s daughter might try to steal a valuable jewel. Leverage is being in the fictional situation that allows a character to attempt a given goal in the first place.
    %p
      When a character’s declared goal is kinda sudden and unexpected in the context, it is a matter of
      = succeed "." do
        %code propriety
      This is not so much about moral judgement most of the time, but rather about the norms of the fun game — a very typical campaign norm is that named, important characters are not killed just like that, off-hand. So in this kind of campaign the Story Guide might question the propriety of the goal and perhaps clarify that while the character might seem to die, he might also come back later as the result of a miraculous rescue, a common motif of adventure stories.
    %p
      When the group thinks that some matter of fiction should not be skimmed too quickly, it is a question of
      = succeed "." do
        %code scope
      If the emir and his jewel are not important, the group might think that it is a swell idea to have the daring thievery resolved in one conflict — just roll
      %code Thievery (I)
      against the emir’s
      %code Suspicion (R)
      and be done with it. If that pace is too quick, however, the group might wish to insist on a smaller conflict scope — finding out whether the character can even get into the emir’s seraglio, or how he outwits the guards, or how he charms the emir’s daughter — these are all fine and exciting conflicts on their own, well able to branch in unexpected directions.
    %p When determining the stakes of a conflict, the Story Guide should keep an eye on all of leverage, propriety and scope: is the character in position to try for this goal, or should he first maneuver into position? Is the goal an appropriate event for the genre? Do we, as a group, want to skim or slow down over these events? Making these decisions is not as difficult as it might sound, and the rest of the group will certainly have their own notions. If in doubt, go with the goal declared by the player — if the emir’s jewel is just a step in some interesting story, take care of it in one conflict and move on.
    %aside.well
      %h2#opponent-cannot-oppose Opponent Cannot Oppose
      %p The issues of leverage and propriety cut both ways in conflict, so sometimes it’s possible that a character objects to an event, but cannot do anything to oppose it.
      %p While characters (and players) have many rights in the Solar System, they do not have a right to conflict just because they dislike the turn of events. This does not mean that the burden of proof is very heavy, however; if being able to stop another character is at all conceivable, the character may try, even if the result seems very unlikely.
      %p An example I like to use is one of a jungle man getting sued in court. Presuming that the jungle man has a hostile attitude towards legalities, doesn’t speak the local language and won’t even appear in court, he cannot really stop another character from getting an injunction against him; the attack simply happens in a venue he is not equipped to defend himself in at all. The lawyer would probably still need to make a successful Ability check, though.
      %p
        While a character might not be able to do anything immediately against an opponent who chooses the
        %code turning-point
        of the conflict smartly, that doesn’t mean that the character cannot
        %code extend
        the conflict (see the main text). The classical example is a physical attack that comes as a surprise: the attacker might get the initial check unresisted, but the target will surely extend the conflict.
  %section#selecting-abilities
    %header
      %h2 Selecting Abilities
    %p
      As mentioned earlier, a conflict is just a matter of compared Ability checks: the character with the best check wins the day. However, choosing the Abilities most pertinent in a conflict might be tricky: if a character is tracking a bear to tame it, will he need
      %code Animal Handling (I)
      to handle the bear or
      %code Woodcraft (I)
      to find it?
    %p
      The answer is that the choice of Ability condenses the overall situation into one
      %code turning-point
      where everything hinges in balance. The notion that great feats of Ability actually resolve conflicts is basic to the Solar System; it’s not the weather outside or the price of tea in London that resolves conflicts, but rather the immediate, dramatic clash of Ability during one moment.
    %p
      The
      %code turning-point
      is sometimes important as a concept simply because different characters would benefit from different Abilities. For example, if the bear (not wanting to be tamed) is weak-willed but good at hiding, it would benefit from getting to match its
      %code Hiding (I)
      against the woodsman’s
      = succeed "," do
        %code Woodcraft (I)
      other things being equal.
    %p In practical play the turning-point might often be obvious in that the players have an actual scene at hand, with actual, uncontested narration going on. If the Story Guide narrated the woodsman encountering the bear out in the woods, the bear would actually forfeit the hiding option by making that appearance. That’s quite possible when the bear (or the Story Guide, or even the player) doesn’t know that the woodsman would decide to try to tame it.
    %p Other times, when characters are aware of each other and have room to maneuver, the resolution is different: if the bear knows to keep out of the way of the woodsman, it’s obvious that the woodsman needs to find the bear to even have an opportunity to try taming it.
    %p Where the turning-point in setting up a conflict lies is ultimately up to the players who take initiative in narrating matters and shaping the fictional situation. A large part of the Story Guide’s job is to encounter each other in conditions that allow for exciting conflicts. Even then, however, the player who takes the initiative often gets to choose not only his own Ability, but the Ability his opponent will use as well!
    %p
      Of course,
      = succeed "." do
        %a{:href => "ability-check#supporting-a-check"} Abilities may support each other in support chains
      Sometimes the Story Guide might even explicitly require this, such as when a character first needs to find the bear before befriending it.
    %p
      Ultimately, the matter of choosing the correct Ability checks is the first and foremost an aesthetic issue for the group to suss out. The choice that makes the most sense in the fiction is the right one, be that just one Ability check or several chained checks. The best Abilities to use are often not the ones the character is best at, and the Story Guide shouldn’t hesitate to encourage the players to use that untrained,
      %code Mediocre (0)
      Ability if that’s the one that actually makes sense, considering what the character is trying to do in the first place.
    %aside.well
      %h2#always-using-your-best-ability Always Using Your Best Ability
      %p
        Some players might question why they couldn’t just use their character’s best Ability all the time — after all, an Ability like
        %code Swordfighting (V)
        goes a long way when it comes to getting out of pickles!
      %p
        The first answer is that the rules very well assume that the characters are going to rely on their strengths! The whole
        %em point
        in having different Abilities is that they characterize the kind of things the characters usually choose to do when given a choice.
      %p
        The second answer is that what the character
        %em does
        in the fictional situation depends on which Ability you choose: if you pick
        = succeed "," do
          %code Swordfighting
        then the situation needs to be described to involve swordfighting, which might make your character a jerk or a brute.
      %p The third answer is that the player might not always wish for his character to win — it’s entirely possible to advocate for your character’s vile passions while hoping as audience that he’ll fail. Besides, the character’s story is more interesting if he both wins and loses believably.
  %section#resolving-the-conflict
    %header
      %h2 Resolving the Conflict
    %p When stakes have been defined, Abilities selected and the situation described, the players may make their Ability checks. The group gets to narrate the events according to who rolled highest: that character achieved his goal (or as much of it as the stakes concerned, anyway) in whatever manner seems appropriate.
    %p Most narrating conflicts is simple, but a word on stomping other characters: while a given conflict might force a character to act in a certain way, this is always interpreted as a temporary loss of control, not wholesale limitation upon further behavior. For example, “I flirt with him and lure him to my room tonight” is a fine goal in conflict, but it implies nothing about how the other character reacts in the morning; he might be happy, mortified, angry or however the other player chooses to depict the event.
    %p Tied conflicts are fun, too: if both sides get the same Ability check result, the group is encouraged to narrate the situation in a way that frustrates or fulfills both sides equally. Perhaps something comes up to interrupt the characters, or they come to negotiate the situation (verbally or not), so that the conflict need not play to the finish. Or, you can just roll again if nothing particularly inventive comes up.
    %aside.well
      %h2#the-joy-of-tied-conflict The Joy of Tied Conflict
      %p Tied conflicts are a great tool for pacing stories, frustrating characters who try to resolve their problems. They’re especially common with low-Ability characters whose stories are just beginning. Consider ties carefully.
      %p An interesting notion is that a tie warrants Story Guide interception in the form of an overbearing new condition that annuls the conflict: the floor gives in and drops both duelists into an underground river, for example.
      %p
        Another good idea is that perhaps both characters can get what they want, at least partially. Perhaps the two spies trying to drink each other into stupor
        %em both
        let slip the information the other side was looking for.
  %section#ability-checks-in-conflict
    %header
      %h2 Ability checks in conflict
    %p
      The result of an Ability check is calculated normally in conflict. Often both sides have
      %code successful
      Ability checks but one side
      %code fails
      in the conflict — this is really easy to narrate, the mutual success with the Abilities just means that one side’s success is made ineffectual somehow in achieving his goal, or perhaps an otherwise flawless maneuver was blocked by the even better play of the opposition. Liberally following
      %a{:href => "ability-check#narrating-success"} the ability check narration guidelines
      is sure to make for an interesting scene!
    %p Most of the time you don’t see lead heroes in fiction making goofy mistakes that allow their opponents to triumph — much more likely it’s random bad luck or the opponent being even more able that causes a character to be frustrated. Follow this same principle with the Solar System: your opponent’s victory does not mean your own incompetence, there are plenty of other reasons for why things might turn out the way they do.
    %p
      When Ability checks are used in conflict, the
      %code winner
      gets to use his Ability check result for recording an Effect, supporting another check, activating a Secret or other mechanics that might require a successful Ability check. The loser’s check is considered to fail in this regard.
  %section#several-characters-in-conflict
    %header
      %h2 Several characters in conflict
    %p When several characters are supporting each other in conflict, it’s easy: just use the rules for supporting Ability checks.
    %p However, when there are more than two characters in conflict and they actually all have different goals, the situation is a bit different. Have all the separate parties make their own Ability checks and then compare them all: the strongest party gets their way, but others might also get part of what they were after if the goals are not completely opposed. In each case the stronger party triumphs over all weaker parties when figuring out who gets their way in the situation.
  %section#solo-conflicts
    %header
      %h2 Solo conflicts
    %p
      It is relatively rare, but sometimes a character needs to make Ability checks to overcome unliving obstacles on his path. The rules for
      %a{:href => "ability-check"} Ability checks
      largely deal with this already; just pick the appropriate Abilities and check them to see how the character does against the obstacle. Any result apart from
      %code Failure (0)
      means that the character succeeds in the “conflict”.
    %p
      However, there is a situation where a mere success might not be enough, and that is when a character ends up going against an
      %code
        %a{:href => "ability-check#recording-effects"} Effect
      established earlier. When that happens, the character needs to get a check result higher than the Effect’s value. It’s just like if the character was going against the character who created the Effect, the situation is just delayed somewhat.
    %p Going against Effects might happen when a character sets up Effects as traps or other obstacles from the start, or an Effect might just happen to come between a character and his goals inadvertently. The Story Guide may well decide to make certain extraordinary, lifeless features of the setting into Effects (perhaps created some time ago by secondary characters); this option should not be over-used, as Effects can be very powerful.
    %p Effects that go against characters in conflict might erode, akin to how characters suffer Harm in conflict: the Story Guide may determine that an Effect that loses a conflict against a character takes Harm by lowering its value, if it’s not just outright destroyed by the triumphing character.
    %p
      The group should keep in mind that conflicts without active opposition are only rarely appropriate or necessary; if the situation is such that the character may be assumed to succeed without significant consequence
      = succeed "," do
        %em sooner or later
      then running a conflict over it is unnecessary. This is the same as saying that conflicts should have significant stakes, and when such may not be formulated, the Story Guide should take that as a sign that no conflict is needed in the first place. Thus climbing walls, interpreting old documents, masquerading as somebody else and other feats of skill are only pertinent solo conflicts when failure carries some weighty consequences.
  %section#secondary-characters-in-conflict
    %header
      %h2 Secondary characters in conflict
    %p Secondary characters run by the Story Guide are perfectly able to participate in conflicts; most conflicts are usually between player characters and secondary characters.
    %p Secondary characters acting against or for player character interests may engage in conflicts. However, secondary characters do not run conflicts between themselves — the Story Guide just decides what happens between secondary characters, at least insofar as he happens to play them all. (Some Secrets might allow players to control secondary characters, so the actual rule is more exactly stated y requiring there to be more than one player participating in conflict.)
    %p
      More information about running
      %a{:href => "story-guide#secondary-characters"} secondary characters
      can be found in
      = succeed "." do
        %a{:href => "story-guide"} Story Guide
      The chapter also discusses the reasoning behind having different events occur by Story Guide decision.
    %h3#i-lost-the-conflict I lost the conflict!
    %p
      Sometimes characters lose conflicts that the players would rather not, as the results might be embarrassing or even fatal for the poor character. Luckily, there is a specific out in the rules: the player may decide to
      %code extend
      the conflict to retry in detail. Such an
      %code extended conflict
      is then played out in blow-by-blow detail. An extended conflict has great potential for Harm and Pool attrition for characters, and it also takes a bit of time compared to a normal conflict. Usually only the most important conflicts are extended.
