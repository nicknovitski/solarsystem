%section#ability_check.chapter
  %header
    %h1 Ability Check
  %p
    Basically, the
    %code Ability check
    is the core resolution mechanism in the Solar System: whenever players want to find out whether a character succeeds in a tight spot, an Ability check may be used to find out.
  %p
    Most Ability checks are made in conflict against other characters as described in
    = succeed "," do
      %a{:href => "/conflict_resolution"} Conflict Resolution
    but there are other uses for the Ability check as well. For example, a character might wish to use his secret alchemical lore to brew a love potion; should the group want to know whether the brew was any good, an Ability check could be a nice idea for finding that out.
  %p
    To make a simple Ability check, the player chooses an appropriate Ability for the character to use in the check and rolls three
    = succeed "." do
      %a{:href => "/starting_a_game"} Fudge dice
    The Fudge dice results are added to the value of the Ability to find out the check result. As Abilities range from
    %code Mediocre (0)
    to
    %code Grand Master (4)
    in value while the roll ranges from -3 to +3, the Ability check result is a value from 0 to 7. (We’re not counting negative results at all, they’re all zero.)
  %table#ability_check_results.table.table-bordered.table-striped
    %caption Ability Check Results
    %thead
      %tr
        %th Value
        %th Result
        %th Meaning
    %tbody
      %tr
        %td 0
        %td Failure
        %td The character does not benefit from the effort.
      %tr
        %td 1
        %td Marginal
        %td The expected routine result
      %tr
        %td 2
        %td Good
        %td Some bragging rights among comrades.
      %tr
        %td 3
        %td Great
        %td A matter of personal pride for the person.
      %tr
        %td 4
        %td Amazing
        %td Others give kudos to the result as well.
      %tr
        %td 5
        %td Legendary
        %td The deed inspires stories and songs.
      %tr
        %td 6
        %td Ultimate
        %td Breaks conceived norms of human capability.
      %tr
        %td 7
        %td Transcendent
        %td The deed transforms the world, permanently.
  %p
    %code Transcendent
    Ability checks are discussed in more depth in
    = succeed "," do
      %code
        %a{:href => "/keys_and_experience#transcendence"} Transcendence
    as they are extremely important in an on-going campaign. Other than Transcendent results, most of the time players are most interested in whether a given Ability check
    %code succeeds
    or
    = succeed "." do
      %code fails
    Any positive result means that the character was successful in doing what he was trying to; this does not necessarily mean that the character succeeds in his overall goals, but the immediate task was successful and perhaps even amazingly successful. In practice the overall effect of a character’s success in Ability checks is determined by
    = succeed "." do
      %a{:href => "/conflict_resolution"} the conflict resolution system
  %p However, a great deal of useful play can be derived from simple Ability checks alone when the character is in a simple and straightforward situation: the player just chooses an Ability, rolls the dice and announces whether the character succeeds in his deed. Climbing difficult cliffs, successfully piloting a starship on a routine run, filing tax return forms correctly or whatever interests the group in the character’s activities which can be resolved with a simple check to find out how well the character does.
  %p When an Ability check should be used is largely a matter of taste; any player may call for one when he would find it interesting to find out how a given character does in a situation. Obviously, players don’t need to make checks in situations that aren’t interesting: checks should be used only when resistance from the setting will be welcomed as a friend and ally to the group’s dramatic efforts, not when it might bog down play by providing ultimately meaningless results.
  %p
    When an Ability check is considered, the Ability a character uses is always the one most suitable for the situation in the fiction. For simple Ability checks this is obvious most of the time: if the setting has a
    %code Climbing (V)
    Ability or similar, then that’s most certainly the one to use when a character is trying to scale a cliff, for example. The Story Guide may help the player to pick the correct Ability by clarifying the situation facing the character
  %section#timing_and_stakes
    %header
      %h2 Timing and stakes
    %p Ability checks always arise from free play: players describe action in a scene and at some point the Story Guide calls for the check. Or perhaps the player makes it up. It is important to note that until and unless the dice hit the table, all this talk is just speculative — players are trying to find out what the check would be like, they’re not committing to have their characters act in a certain way.
    %p This is an important point when the players, Story Guide included, go into a give-and-take about the details of an Ability check: an Ability might be picked for the check only for the Story Guide to recommend something else based on the situation, or there might be penalty dice involved (more on those later). At the very least the players need to all be on the same page about the scope of the check, why it’s being made, its stakes. All these matters are negotiated freely before the check and before the player or the character commit to any particular course of action.
    %p
      The
      %code stakes
      of an Ability check are worthy of elaboration, important as they are: each Ability check is made for a reason, which is called its stakes. Players should always know why an Ability check is being made, if for no other reason than to have their character refuse to risk it. Being aware of the stakes enables the group to consciously determine the scope of the check.
  %section#narrating_success
    %header
      %h2 Narrating success
    %p Those varying levels of success can be used to great effect in introducing interesting consequences to any Ability check where the degree of success might make a difference. The group, and especially the Story Guide, are in a good position to use the level success as an inspiration in narration.
    %p
      A
      %code Failure (0)
      result does not have to mean that the character’s efforts just fizzle; most of the time failure in the Solar System should be a cinematic affair full of dramatic consequence. A character who fails in a
      %code Climbing (V)
      check isn’t going to just “not get on the top of the cliff”, he’s going to fall down from high and break his collarbone, being stranded alone and wounded in the wilderness.
    %p
      A
      %code Marginal (1)
      success might sound dull and predictable, but what it actually means is that the Story Guide is welcome to add a little twist, some complication to the success. The character might indeed get to the top of the cliff, but it might take so long that night falls during the climb, for example.
    %p
      What characters really want is a
      = succeed "," do
        %code Good (2)
      solid success, as that’s something to be proud of. Colleagues won’t find flaws in it, it’s the real thing. A bit dull, perhaps, but nobody’s going to interpret it as anything but solid fulfillment of the stakes.
    %p
      A
      %code Great (3)
      is essentially master-level: it’s good and a little bit more, yet. The player would be well within his rights to describe how his character not only succeeds, but also does it in style. Getting to the top of the cliff is a given, but the character might as well find an easy route up, one that makes a second climb nigh trivial for him later on.
    %p
      An
      %code Amazing (4)
      success, as the chart says, is something that onlookers would be astounded by. A character making that kind of check deserves to have a solid edge further in the scene — finding a sheltered cave in the cliffside to spend the night could be a positive twist supplied by the Story Guide, for example. Not exactly what the character tried to do, but a further positive development for him nonetheless.
    %p
      A
      %code Legendary (5)
      success goes into the realm of heroic fantasy in many ways, influencing the character’s whole situation in a positive manner. New and even slightly unrelated opportunities might appear — meeting unexpected allies or friends waiting at the cliff top might reflect this dramatic influence, for example.
    %p
      Characters making
      %code Ultimate (6)
      Ability checks should not have to check the same Ability again in this session, barring dramatic circumstances or player initiative. It would be reasonable to decide that a Climbing success at this level overflows into long-term success, making the whole cliff-climbing a non-issue for the rest of the journey.
    %p
      Finally, a
      %code Transcendent (7)
      check, as the name implies, really means that the character broke the limits of what the Ability actually
      = succeed "." do
        %em means
      Every
      %code
        %a{:href => "/keys_and_experience#transcendence"} Transcendence
      is different; the character’s story is clearly at an end, but it’s up to the player to describe how.
    %p While the guidelines above are certainly useful when considering the meaning of a character’s success, they’re nothing to worry unduly about in routine checks; not all Ability checks are created equal, sometimes you just need to know the number and not have to care about any extra consequences it might signify. On the other hand, thinking a bit about the “something extra” that the degrees of success provide is a great way of giving definition for an otherwise vague and unexciting situation in play.
    %aside.well
      %h3#narration_of_ability_checks Narration of Ability Checks
      %p
        The rules do not determine who should describe what happens after an Ability check. As far as the Solar System is concerned, the narration is a value-neutral task: the group chooses the ideas that best represent the mechanical results and enacts them into the fiction. If players feel a need to determine
        %em who
        gets to decide on the details, that’s probably a sign of somebody using the Ability check process to push a partisan agenda.
      %p Regardless, if there is some disagreement as to how play should proceed from the Ability check, the check result can be interpreted by the player who called for the check in the first place. Often this is the Story Guide, simply because one of his tasks is to set up resistance and challenges for the characters, and thus many Ability checks originate with him.
  %section#no_suitable_ability
    %header
      %h2 No suitable Ability?
    %p Sometimes characters do not have an Ability suitable for a situation. There are two different possibilities here:
    %ul
      %li
        The character has a background where it makes sense that he would have the Ability in question at
        = succeed ";" do
          %code Mediocre (0)
        the player just has not written it down yet. Doing that fixes the situation.
      %li The character is trying to do something that he is not equipped to do at all, such as fly without wings or use a computer with medieval schooling. In this case the character fails automatically.
    %p The latter situation seems pretty blatant, but that’s all a matter of degree in some settings. For example, if the campaign setting includes special individuals with psionic abilities, it’s kinda important to know whether a person can resist the psionics in any way, or whether trying such would be an automatic failure. How intricate these questions become depends on the setting more than anything.
    %p
      In general, the rules of thumb is that if a character
      %em should
      be able to try something but the group can’t name the Ability that would be used, the default assumption is to make the check with a
      %code Mediocre (0)
      Ability. It’s not necessary to name the Ability when making the check, it’s enough to know that it exists in some form.
  %section#bonus_and_penalty_dice
    %header
      %h2 Bonus and penalty dice
    %p
      The basic Ability check is a simplistic randomizer that gives results very close to the Ability rank most of the time.
      %code Bonus
      and
      %code penalty dice
      are a powerful tool for changing the situation. These are normal Fudge dice that are added to the three rolled in an Ability check.
    %p
      Whenever a player has one or more bonus dice in an Ability check, he rolls them right alongside the three default Fudge dice. After rolling, the player picks the
      %em three best results
      for his check and discards the rest of the dice. With penalty dice the procedure is similar, except the player picks the
      %em three worst dice
      and discards the rest.
    %p Bonus and penalty dice are attained from many separate sources, but perhaps the most common one is spending Pool for effort: the player spends one point from the Pool associated with the Ability to add one bonus die to the roll. A player may do this only once per check, but more bonus dice might well be gained from elsewhere as described later on.
    %p If the player ends up with both bonus and penalty dice in one roll, they simply cancel each other out on a 1:1 basis. An individual check will never have both bonus and penalty dice in it when the dice are rolled, in other words.
    %p An important detail is that bonus and penalty dice may be added to the roll either before or after the initial dice are rolled. Extra dice after the roll are simply rolled immediately (unless cancelled) and the player picks the three best or worst results normal. While the exact order of additions and their timing in relation to rolling the dice affects the final outcome, the players may choose their play freely for simplicity’s sake; just add each batch of dice and reduce to three until everybody is happy or unable to modify the result any further.
    %aside.well.variant
      %h3#variant_complex_extra_dice Variant: Complex Extra Dice
      %p Some tactically inclined groups might be bothered by the free order of dicing in Ability checks; bonus and penalty dice added later in the process have more impact on the final result, which might cause annoying tactical conditions.
      %p A simple way to counteract the tactical benefit of dribbling the bonus dice into a check is to instate an extra surcharge of one Pool point on each batch of dice after the initial roll. This way players are encouraged to add their dice before the initial roll, or at least to add dice in as few batches as they dare; adding dice one by one would cost a prohibitive 1 extra Pool point per die.
      %p
        Alternatively, a group might develop Secrets that worked with the stages of Ability check resolution, as described in
        = succeed "." do
          %a{:href => "/secrets_and_crunch"} Secrets and Crunch
        Those tools make it relatively easy to balance the check procedure to one’s liking.
  %section#circumstance_penalties
    %header
      %h2 Circumstance penalties
    %p
      The most common type of penalty dice is freely adjudicated by the Story Guide: whenever a character is trying something under considerably adverse conditions, the Story Guide may just decide that this requires a penalty die. For
      %em really
      hard deeds the Story Guide may assign two penalty dice as circumstance penalties.
    %p It is important to realize that the adverse conditions here really need to be so significant as to be obvious to a movie audience viewing the action: something like driving an old car with clunky transmission in a car chase hardly bears consideration, we should be discussing driving at night without lights on an unfamiliar road to get at least one penalty die. Not having brakes at all or putting a blind man at the wheel is more like it for two penalty dice in a car chase situation.
    %p Both external factors and lacking tools may be considered for circumstance penalties, so having a somehow faulty car or just a blinding storm are both fine, as would be trouble with the driver, such as a blindfold.
    %p The Story Guide should remember that if he really, truly feels that two penalty dice is not enough for some outrageous stunt, such as escaping in a car without a fourth wheel (or the engine block, whatever it takes in your genre to make a car truly unusable), then it is more likely that the deed to be considered is simply impossible — the character simply fails in such a futile endeavor, should the player wish to try it in the first place.
  %section#supporting_a_check
    %header
      %h2 Supporting a check
    %p
      Sometimes characters have several Abilities that could be used for a particular deed, or parts of it. In these situations the Abilities are ranked and checked in order: the result of each check turns into support dice for the next check in the series, so rolling a
      %code Good (2)
      check in support provides two bonus dice for the next check, for instance. Pretty simple, so far.
    %p
      The order of the checks is determined based on how the player describes the situation: if any Abilities are used in the deed in a clearly consecutive order, it’s pretty natural to have those follow each other in sequence. If abilities are in play both at once, then the less important Ability is checked first. If the Abilities are equally important in the situation and used simultaneously, then the stronger Ability is checked first. For example, if a character tried to intimidate somebody and supplemented it with blackmail dredged up from the Internet, the natural order is to have the player check
      %code Internet use (R)
      first and then
      = succeed "," do
        %code Intimidation (V)
      as that’s the order of action. When a character is trying to supplement his
      %code Fighting (V)
      with
      %code Riding (V)
      for mounted combat, though, the Abilities are used simultaneously and thus Riding might be checked first, were it deemed less important in the exact situation.
    %p Players may chain Ability checks as makes sense in the situation, but any failures in the supporting checks cause dire consequences: if the failing Ability does not play a critical role in the situation, the next check suffers a penalty die, but if the Ability was actually necessary for the deed, then the whole deed fails.
    %p Ability checks may also be supported by other characters: the players just describe how the characters work together and chain the Abilities normally. As before, the check order is shuffled based on the order of Ability use in the fiction.
    %p Supporting Ability checks with other Abilities is perhaps the easiest way to earn bonus dice to an important check, but remember that a single check may only ever get support from one source: multiple sources need to give their bonus dice to each other and have only the penultimate check provide bonus dice for the last and most important check. In practice this means that actively hunting for a lot of support Abilities isn’t worth the effort.
    %p However, the Story Guide has the perogative to allow exceptions to the rule of only one support chain: when a character is supported from two completely independent directions that couldn’t sensibly support each other (and thus be part of the same support chain), he may allow separate sources of support dice. Situational call, that, and whatever makes sense for the group should rule.
    %aside.well.variant
      %h3#variant_gift_of_dice Variant: Gift of Dice
      %p
        The right group will find it very rewarding to increase the number of bonus dice flying around by instituting the
        = succeed "," do
          %code Gift of Dice
        a way for the players in the audience to comment upon play.
      %p At the beginning of each game session, distribute 20 Fudge dice between the players, Story Guide included. (Or use tokens instead of actual dice, of course.) These dice can then be given out as bonus dice to any but the player’s own character at his discretion. Excess dice are lost at the end of the session.
      %p The Gift dice enable the audience to participate even when their characters are not in the scene. They allow players to express their sympathy for characters. It’s an all-round good deal if you just remember to actually use the dice.
      %p An alternative is to pool all the dice in the middle of the table and let anybody give gifts to others from this common pool, but only one die per check per player. This might work even better as long as the players remember to act as sympathetic audience and not partisan tacticians when using the pool.
      %p (If you play very short or long sessions, try 5 dice + 5 per hour of play or so instead. Or just refill everybody when all but one player have spent their gift dice.)
  %section#recording_effects
    %header
      %h2 Recording Effects
    %p
      A player may opt to make a special kind of Ability check called
      %code Effect
      — or rather, the player looks at an Ability check he just made and decides to record it as one. Any Ability check that is not used for other mechanical effects (such as supporting another check or activating a Secret) may be recorded as an Effect immediately after the check is made.
    %p
      Effects are little notes players make for themselves on their character sheets; they remind the player of the deeds and preparations a character might have made. So if an Ability check was made to see whether the character succeeded in brewing a love potion and the check came up
      = succeed "," do
        %code Amazing (4)
      the player would write “Brewed a love potion 4/R” on the sheet. Or just “Love potion 4/R” for that regard; the player chooses how to describe the Effect, as long as it makes sense for the situation and he remembers to mark down the associated Pool and check result from the Ability used to create the Effect.
    %p Recording an Effect costs a Pool point from the Pool associated with the Ability the character used, so any old Ability check is probably not worth the trouble to record.
    %p
      The reason for recording Effects at all is that the player may
      %code call
      on the Effect later on to provide bonus dice to any check that pertains to the Effect; he just marks down how many dice the Effect loses and takes those as bonus dice. When the Effect loses its whole value the player may cross it off altogether.
    %p
      (Another way to use Effects is to put them up as obstacles for other characters; more on this in
      = succeed ")" do
        %a{:href => "/conflict_resolution#solo_conflicts"} Solo Conflicts
  %section#using_effects
    %header
      %h2 Using Effects
    %p Effects are great for when a character knows that he’s going to be facing adversity: he might stock up on tools suitable for the job, hire mooks to help him out, set up traps for that monster that’s going to call at midnight or make whatever other preparations he has in mind. An Effect might be used all at once (especially when it’s the kind that is not useful for a second shot) or spread out over several checks. The character might also have his effects stolen or give them to others voluntarily; a scientist whose notes disappear during the night would lose the Effect tied to them, for example. Or the character who made that “love potion 4/R” might give half of it (two dice’s worth) to another character easily enough.
    %p Characters may also sometimes declare an Effect out of something another character did: when a character makes a motivational speech, for instance, it would make sense that the audience can take the result of the speech as an Effect representing the motivation. Only one character may make an Effect of each individual Ability check, however, so several character would have to share or distribute the Effect between them. The Pool cost is always paid by the character who gets the Effect.
    %p
      There is no particular guarantee that a character gets to use any Effect he makes, it all depends on whether a suitable situation comes up later. Furthermore, Effects are
      = succeed ":" do
        %em transitory
      players remove all Effects associated with a particular Pool when they refresh that Pool, unless they pay one Pool point per Effect to preserve it. The idea is that the character who lets down his guard feels confident enough to discard any temporary preparations he might have made; Effects are not actually a part of the character concept like Abilities or Secrets are.
    %p
      Effects are sometimes required or generated by
      = succeed "," do
        %code Secrets
      as per
      = succeed "." do
        %a{:href => "/secrets_and_crunch"} Secrets and Crunch
      As a general rule, Effects and Ability checks can be used interchangeably wherever that would make sense; an Effect is essentially just an Ability check result saved for later need, so whenever it makes sense in the fiction for a character to be able to switch an Effect for an Ability check or vice versa, go for it.
    %p
      One more point should be made about
      = succeed ":" do
        %code Transcendent Effects
      an Effect created by a
      %code Transcendent (7)
      Ability check becomes a permanent, non-transitory setting-feature as part of the player’s Transcendence narration, as per
      = succeed "." do
        %code
          %a{:href => "/keys_and_experience#transcendence"} Transcendence
      Such Effects lose their nature as character-specific Effects and become normal, permanent features of the setting.
    %h2#my_check_is_resisted My check is resisted!
    %p
      If a character is going to do something important and another player is all agitated about it and wants to have his character interfere, then congratulations, you have a conflict. Conflicts are explored intimately in the following chapter.  To tell the truth, the conflict is really the primary reason for having these Ability checks in the first place; this overview of how Ability checks are made is here in a separate chapter just because it’s more clear to lay it out this way.